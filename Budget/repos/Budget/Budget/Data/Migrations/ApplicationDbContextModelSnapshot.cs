// <auto-generated />
using System;
using Budget.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Budget.Data.Migrations
{
    [DbContext(typeof(BudgetDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Budget.Models.Banque", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompteId");

                    b.ToTable("Banques");
                });

            modelBuilder.Entity("Budget.Models.Compte", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BanqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EcritureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdBanque")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPersonne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Numero")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PersonneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BanqueId");

                    b.HasIndex("EcritureId");

                    b.HasIndex("PersonneId");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("Budget.Models.Ecriture", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Debit")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdCompte")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompteId");

                    b.ToTable("Ecritures");
                });

            modelBuilder.Entity("Budget.Models.Personne", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompteId");

                    b.ToTable("Personnes");
                });

            modelBuilder.Entity("Budget.Models.Banque", b =>
                {
                    b.HasOne("Budget.Models.Compte", null)
                        .WithMany("Banques")
                        .HasForeignKey("CompteId");

                    b.HasOne("Budget.Models.Banque", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Budget.Models.Compte", b =>
                {
                    b.HasOne("Budget.Models.Banque", "Banque")
                        .WithMany()
                        .HasForeignKey("BanqueId");

                    b.HasOne("Budget.Models.Ecriture", null)
                        .WithMany("Comptes")
                        .HasForeignKey("EcritureId");

                    b.HasOne("Budget.Models.Personne", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.Models.Personne", "Personne")
                        .WithMany()
                        .HasForeignKey("PersonneId");
                });

            modelBuilder.Entity("Budget.Models.Ecriture", b =>
                {
                    b.HasOne("Budget.Models.Compte", "Compte")
                        .WithMany()
                        .HasForeignKey("CompteId");

                    b.HasOne("Budget.Models.Compte", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Budget.Models.Personne", b =>
                {
                    b.HasOne("Budget.Models.Compte", null)
                        .WithMany("Personnes")
                        .HasForeignKey("CompteId");
                });
#pragma warning restore 612, 618
        }
    }
}
